[/
  (C) Copyright 2010 Glyn Matthews.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:appendix_1 Appendix 1: Message Concepts]

[section:message_concept Message]

__message__ is
[@http://www.boost.org/doc/html/DefaultConstructible.html
DefaultConstructible],
[@http://www.boost.org/doc/html/CopyConstructible.html
CopyConstructible] and [@http://www.boost.org/doc/html/Assignable.html
Assignable].

[heading Description]

A type models the URI Concept if the type adheres to the following
usage semantics, and is DefaultConstructible and EqualityComparable.

[variablelist Notation
    [[`M`] [A Message Type.]]
    [[`m`, `m_`] [A Message Type instance.]]
    [[`S`] [A String Type.]]
    [[`s`] [A String Type instance.]]
    [[`O`] [An Ostringstream Type.]]
    [[`o`] [An Ostringstream Type instance.]]
    [[`C`] [A Header Container Type.]]
    [[`c`] [A Header Container Type instance.]]
]

[heading Valid Expressions]

[table
    [[Expression]         [Return Type]   [Description]]
    [[`M m_(m);`]         []              [M must be Copy constructible.]]
    [[`M m_; m_ = m;`]    []              [M must be Assignable.]]
    [[`swap(m, m_);`]     [void]          [Swap should be availabe via ADL.]]
    [[`M::string_type`]   [S]             [M should have a nested type `string_type` of type `S`.]]
    [[`M::headers_container_type`] [C]    [M should have a nested type `headers_container_type` of type `C`.]]
]


[endsect] [/message_concept]

[endsect] [/appendix_1]

[section:appendix_2 Appendix 2: URI Concepts]

This page describes the URI Concepts implemented within cpp-netlib.
The following concepts are also implemented as Boost.Concept_check
types enforced by the URI library.

URI Concepts are organized into a hierarchy of conepts.

[section:uri_concept URI]

[heading Description]

A type models the URI Concept if the type adheres to the following
usage semantics, and is DefaultConstructible and EqualityComparable.

[variablelist Notation
    [[`U`] [A URI Type.]]
    [[`u`, `u_`] [A URI Type instance.]]
    [[`S`] [A String Type.]]
    [[`s`] [A String Type instance.]]
]

[heading Valid Expressions]

For any URI, the following expressions must be valid:

[table
    [[Expression]       [Return Type]   [Description]]
    [[`U u_(u)`;]       []              [U must be Copy constructible.]]
    [[`U u_; u_ = u;`]  []              [U must be Assignable.]]
    [[`U u_(s)`;]       []              [U can be constructed from a string `s`.]]
    [[`swap(u, u_);`]   [void]          [Swap should be availabe via ADL.]]
    [[`protocol(u);`]   [S]             [Return the protocol part of the URI.]]
    [[`rest(u);`]       [S]             [Return the rest of the URI, excluding the protocol part.]]
    [[`valid(u);`]      [bool]          [Return true whether the URI is a valid URI.]]
    [[`U::string_type`] [S]             [U should have a nested type `string_type` of type `S`.]]
]

[endsect] [/uri_concept]

[section:http_uri HTTP URI]

A type models the HTTP URI Concept if the type adheres to the following
usage semantics, and if the type also models the URI Concept.

[variablelist Notation
    [[`H`] [An HTTP URI Type.]]
    [[`h`,`h_`] [An HTTP URI Type instance.]]
    [[`S`] [A String Type.]]
    [[`s`] [A String Type instance.]]
]

[heading Valid Expressions]

For any HTTP URI, the following expressions must be valid:

[table
    [[Expression]   [Return Type]   [Description]]
    [[`user_info(h)`] [S]           [Retrieve the user-info part of the HTTP URI.]]
    [[`host(h)`]    [S]             [Retrieve the host part of the HTTP URI.]]
    [[`port(h)`]    [uint16_t]      [Retrieve the port part of the HTTP URI.]]
    [[`path(h)`]    [S]             [Retrieve the path part of the HTTP URI.]]
    [[`query(h)`]   [S]             [Retrieve the query part of the HTTP URI.]]
    [[`fragment(h)`][S]             [Retrieve the fragment part of the HTTP URI.]]
]

[endsect] [/http_uri]

[endsect] [/appendix_2]
